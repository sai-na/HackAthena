import { ConnectParams, TWConnector } from "../../interfaces/tw-connector";
import type { DeviceWalletConnectionArgs } from "../../wallets/device-wallet";
import type { Chain } from "@thirdweb-dev/chains";
import type { Signer } from "ethers";
import { providers } from "ethers";
import type { Wallet } from "ethers";
export type DeviceWalletConnectorOptions = {
    chain: Chain;
    ethersWallet: Wallet;
    chains: Chain[];
};
export declare class DeviceWalletConnector extends TWConnector<DeviceWalletConnectionArgs> {
    #private;
    readonly id: string;
    readonly name: string;
    options: DeviceWalletConnectorOptions;
    protected shimDisconnectKey: string;
    constructor(options: DeviceWalletConnectorOptions);
    connect(args: ConnectParams<DeviceWalletConnectionArgs>): Promise<string>;
    disconnect(): Promise<void>;
    getAddress(): Promise<string>;
    isConnected(): Promise<boolean>;
    getProvider(): Promise<providers.Provider>;
    getSigner(): Promise<Signer>;
    switchChain(chainId: number): Promise<void>;
    protected onChainChanged: (chainId: number | string) => void;
    setupListeners(): Promise<void>;
    updateChains(chains: Chain[]): void;
}
//# sourceMappingURL=index.d.ts.map