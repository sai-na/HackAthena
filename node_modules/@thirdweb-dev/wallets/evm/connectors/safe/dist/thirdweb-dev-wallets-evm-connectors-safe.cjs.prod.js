'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../../../../dist/defineProperty-6ca2d9a5.cjs.prod.js');
var twConnector = require('../../../../dist/tw-connector-a7cbec67.cjs.prod.js');
var ethers = require('ethers');
var safeEthersAdapters = require('@safe-global/safe-ethers-adapters');
var safeCoreSdk = require('@safe-global/safe-core-sdk');
var safeEthersLib = require('@safe-global/safe-ethers-lib');
require('eventemitter3');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var safeCoreSdk__default = /*#__PURE__*/_interopDefault(safeCoreSdk);
var safeEthersLib__default = /*#__PURE__*/_interopDefault(safeEthersLib);

// excerpt from https://docs.gnosis-safe.io/backend/available-services
const CHAIN_ID_TO_GNOSIS_SERVER_URL = {
  // mainnet
  1: "https://safe-transaction-mainnet.safe.global",
  // avalanche
  43114: "https://safe-transaction-avalanche.safe.global",
  // polygon
  137: "https://safe-transaction-polygon.safe.global",
  // goerli
  5: "https://safe-transaction-goerli.safe.global",
  // bsc
  56: "https://safe-transaction-bsc.safe.global",
  // optimism
  10: "https://safe-transaction-optimism.safe.global"
};
const __IS_SERVER__ = typeof window === "undefined";
const SafeSupportedChainsSet = new Set(Object.keys(CHAIN_ID_TO_GNOSIS_SERVER_URL).map(Number));
class SafeConnector extends twConnector.TWConnector {
  // config

  // private options: SafeOptions;

  constructor() {
    super();
    // this.options = options;
    defineProperty._defineProperty(this, "supportedChains", SafeConnector.supportedChains);
    defineProperty._defineProperty(this, "id", "safe-wallet");
    defineProperty._defineProperty(this, "ready", !__IS_SERVER__);
    defineProperty._defineProperty(this, "name", "Safe Wallet");
    defineProperty._defineProperty(this, "previousConnector", void 0);
    defineProperty._defineProperty(this, "safeSigner", void 0);
    defineProperty._defineProperty(this, "personalWallet", void 0);
    if (!__IS_SERVER__) {
      this.ready = true;
    }
  }
  async connect(args) {
    if (!(args.chain.chainId in CHAIN_ID_TO_GNOSIS_SERVER_URL)) {
      throw new Error("Chain not supported by Safe");
    }
    this.safeSigner = await this.createSafeSigner(args);
    return await this.getAddress();
  }
  async createSafeSigner(params) {
    this.personalWallet = params.personalWallet;
    const signer = await params.personalWallet.getSigner();
    const safeAddress = params.safeAddress;
    const safeChainId = params.chain.chainId;
    if (!signer) {
      throw new Error("cannot create Gnosis Safe signer without a personal signer");
    }
    const signerChainId = await signer.getChainId();
    if (signerChainId !== safeChainId) {
      throw new Error("chainId of personal signer has to match safe chainId");
    }
    if (!safeAddress) {
      throw new Error("safeAddress is required");
    }
    if (!safeChainId) {
      throw new Error("safeChainId is required");
    }
    const serverUrl = CHAIN_ID_TO_GNOSIS_SERVER_URL[safeChainId];
    if (!serverUrl) {
      throw new Error("Chain not supported");
    }
    const ethAdapter = new safeEthersLib__default["default"]({
      ethers: ethers.ethers,
      signerOrProvider: signer
    });
    const safe = await safeCoreSdk__default["default"].create({
      ethAdapter: ethAdapter,
      safeAddress
    });
    const service = new safeEthersAdapters.SafeService(serverUrl);
    const safeSigner = new safeEthersAdapters.SafeEthersSigner(safe, service, signer.provider);

    // See this test for more details:
    // https://github.com/safe-global/safe-contracts/blob/9d188d3ef514fb7391466a6b5f010db4cc0f3c8b/test/handlers/CompatibilityFallbackHandler.spec.ts#L86-L94
    safeSigner.signMessage = async message => {
      const EIP712_SAFE_MESSAGE_TYPE = {
        SafeMessage: [{
          type: "bytes",
          name: "message"
        }]
      };
      const encodedMessage = ethers.ethers.utils._TypedDataEncoder.hash({
        verifyingContract: safeAddress,
        chainId: await this.getChainId()
      }, EIP712_SAFE_MESSAGE_TYPE, {
        message: ethers.ethers.utils.hashMessage(message)
      });
      const safeMessage = ethers.ethers.utils.arrayify(encodedMessage);
      const signature = await signer.signMessage(safeMessage);
      return signature.replace(/1b$/, "1f").replace(/1c$/, "20");
    };

    // set the personal signer as "previous connector" so that we can re-connect to it later when disconnecting
    this.previousConnector = params.personalWallet;
    return safeSigner;
  }
  async disconnect() {
    this.safeSigner = undefined;
    this.previousConnector = undefined;
    return undefined;
  }
  async getAddress() {
    const signer = await this.getSigner();
    return await signer.getAddress();
  }
  async getChainId() {
    return (await this.getSigner()).getChainId();
  }
  async getProvider() {
    const provider = (await this.getSigner()).provider;
    if (!provider) {
      throw new Error("No provider available");
    }
    return provider;
  }
  async getSigner() {
    if (!this.safeSigner) {
      throw new Error("not connected - please call connect() first");
    }
    return this.safeSigner;
  }
  async isConnected() {
    try {
      const account = await this.getAddress();
      return !!account;
    } catch {
      return false;
    }
  }
  onAccountsChanged(accounts) {
    if (accounts.length === 0) {
      this.emit("disconnect");
    } else {
      this.emit("change", {
        account: ethers.ethers.utils.getAddress(accounts[0])
      });
    }
  }
  onDisconnect() {
    this.emit("disconnect");
  }
  switchChain() {
    throw new Error("Safe connector does not support switching chains");
  }
  updateChains() {}
  async setupListeners() {}
}
defineProperty._defineProperty(SafeConnector, "supportedChains", Object.keys(CHAIN_ID_TO_GNOSIS_SERVER_URL));

exports.SafeConnector = SafeConnector;
exports.SafeSupportedChainsSet = SafeSupportedChainsSet;
