'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var classPrivateFieldSet = require('../../../../dist/classPrivateFieldSet-422af97a.cjs.prod.js');
var defineProperty = require('../../../../dist/defineProperty-6ca2d9a5.cjs.prod.js');
var twConnector = require('../../../../dist/tw-connector-a7cbec67.cjs.prod.js');
var embeddedWalletServiceSdk = require('@paperxyz/embedded-wallet-service-sdk');
var ethers = require('ethers');
var normalizeChainId = require('../../../../dist/normalizeChainId-a44d9dec.cjs.prod.js');
require('../../../../dist/checkPrivateRedeclaration-fd0a01ed.cjs.prod.js');
require('eventemitter3');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

const PaperChainMap = {
  1: "Ethereum",
  5: "Goerli",
  137: "Polygon",
  80001: "Mumbai",
  43114: "Avalanche"
};
var _paper = /*#__PURE__*/new WeakMap();
var _signer = /*#__PURE__*/new WeakMap();
class PaperWalletConnector extends twConnector.TWConnector {
  constructor(options) {
    super();
    defineProperty._defineProperty(this, "id", "paper-wallet");
    defineProperty._defineProperty(this, "name", "Paper Wallet");
    defineProperty._defineProperty(this, "ready", true);
    defineProperty._defineProperty(this, "user", null);
    classPrivateFieldSet._classPrivateFieldInitSpec(this, _paper, {
      writable: true,
      value: void 0
    });
    defineProperty._defineProperty(this, "options", void 0);
    classPrivateFieldSet._classPrivateFieldInitSpec(this, _signer, {
      writable: true,
      value: void 0
    });
    defineProperty._defineProperty(this, "onAccountsChanged", async accounts => {
      if (accounts.length === 0) {
        await this.onDisconnect();
      } else {
        this.emit("change", {
          account: ethers.utils.getAddress(accounts[0])
        });
      }
    });
    defineProperty._defineProperty(this, "onChainChanged", chainId => {
      const id = normalizeChainId.normalizeChainId(chainId);
      const unsupported = this.isChainUnsupported(id);
      this.emit("change", {
        chain: {
          id,
          unsupported
        }
      });
    });
    defineProperty._defineProperty(this, "onDisconnect", async () => {
      this.emit("disconnect");
    });
    this.options = options;
  }
  getPaperSDK() {
    if (!classPrivateFieldSet._classPrivateFieldGet(this, _paper)) {
      classPrivateFieldSet._classPrivateFieldSet(this, _paper, new Promise(async (resolve, reject) => {
        try {
          if (!(this.options.chain.chainId in PaperChainMap)) {
            throw new Error("Unsupported chain id: " + this.options.chain.chainId);
          }
          const {
            PaperEmbeddedWalletSdk
          } = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@paperxyz/embedded-wallet-service-sdk')); });
          const chainName = PaperChainMap[this.options.chain.chainId];
          resolve(new PaperEmbeddedWalletSdk({
            clientId: this.options.clientId,
            chain: chainName
          }));
        } catch (err) {
          reject(err);
        }
      }));
    }
    return classPrivateFieldSet._classPrivateFieldGet(this, _paper);
  }
  async connect() {
    const paperSDK = await this.getPaperSDK();
    if (!paperSDK) {
      throw new Error("Paper SDK not initialized");
    }
    let user = await paperSDK.getUser();
    switch (user.status) {
      case embeddedWalletServiceSdk.UserStatus.LOGGED_OUT:
        {
          const authResult = await paperSDK.auth.loginWithPaperModal();
          this.user = authResult.user;
          break;
        }
      case embeddedWalletServiceSdk.UserStatus.LOGGED_IN_WALLET_INITIALIZED:
        {
          this.user = user;
          break;
        }
    }
    if (!this.user) {
      throw new Error("Error connecting User");
    }
    this.setupListeners();
    return this.getAddress();
  }
  async disconnect() {
    // await this.paper?.auth.logout();
    this.user = null;
  }
  async getAddress() {
    const signer = await this.getSigner();
    return signer.getAddress();
  }
  async isConnected() {
    try {
      const addr = await this.getAddress();
      return !!addr;
    } catch (e) {
      return false;
    }
  }
  async getProvider() {
    const signer = await this.getSigner();
    if (!signer.provider) {
      throw new Error("Provider not found");
    }
    return signer.provider;
  }
  async getSigner() {
    if (classPrivateFieldSet._classPrivateFieldGet(this, _signer)) {
      return classPrivateFieldSet._classPrivateFieldGet(this, _signer);
    }
    if (!this.user) {
      const paperSDK = await this.getPaperSDK();
      let user = await paperSDK.getUser();
      switch (user.status) {
        case embeddedWalletServiceSdk.UserStatus.LOGGED_IN_WALLET_INITIALIZED:
          {
            this.user = user;
            break;
          }
      }
    }
    const signer = await this.user?.wallet.getEthersJsSigner({
      rpcEndpoint: this.options.chain.rpc[0]
    });
    if (!signer) {
      throw new Error("Signer not found");
    }
    classPrivateFieldSet._classPrivateFieldSet(this, _signer, signer);
    return signer;
  }
  async isAuthorized() {
    return false;
  }
  async switchChain(chainId) {
    // check if chainId is supported or not
    if (!(chainId in PaperChainMap)) {
      throw new Error("Chain not supported");
    }
    const chainName = PaperChainMap[chainId];
    const chain = this.options.chains.find(c => c.chainId === chainId);
    if (!chain) {
      throw new Error("Chain not configured");
    }

    // update chain in wallet
    await this.user?.wallet.setChain({
      chain: chainName
    });

    // update signer
    classPrivateFieldSet._classPrivateFieldSet(this, _signer, await this.user?.wallet.getEthersJsSigner({
      rpcEndpoint: chain.rpc[0]
    }));
    this.emit("change", {
      chain: {
        id: chainId,
        unsupported: false
      }
    });
  }

  // private getUser() {
  //   if (!this.user) {
  //     throw new Error("User not found");
  //   }
  //   return this.user;
  // }

  async setupListeners() {
    const provider = await this.getProvider();
    if (provider.on) {
      provider.on("accountsChanged", this.onAccountsChanged);
      provider.on("chainChanged", this.onChainChanged);
      provider.on("disconnect", this.onDisconnect);
    }
  }
  updateChains(chains) {
    this.options.chains = chains;
  }
  isChainUnsupported(chainId) {
    return !(chainId in PaperChainMap);
  }
  async getEmail() {
    await this.getProvider();
    if (!this.user) {
      throw new Error("No user found, Paper Wallet is not connected");
    }
    return this.user.authDetails.email;
  }
}

exports.PaperChainMap = PaperChainMap;
exports.PaperWalletConnector = PaperWalletConnector;
