{"version":3,"sources":["../src/constants/settings.ts","../src/interfaces/Auth.ts","../src/interfaces/EmbeddedWallets/EmbeddedWallets.ts","../src/utils/iFrameCommunication/EmbeddedWalletIframeCommunicator.ts","../src/utils/Storage/LocalStorage.ts","../src/utils/iFrameCommunication/IframeCommunicator.ts","../src/lib/Auth.ts","../src/lib/EmbeddedWallets/EmbeddedWallet.ts","../src/lib/EmbeddedWallets/GaslessTransactionMaker.ts","../src/lib/EmbeddedWallets/Signer.ts","../src/lib/Paper.ts"],"sourcesContent":["export const EMBEDDED_WALLET_PATH = \"/sdk/2022-08-12/embedded-wallet\";\n\nexport const WALLET_USER_ID_LOCAL_STORAGE_NAME = (clientId: string) =>\n  `paperEwsWalletUserId-${clientId}`;\nconst AUTH_TOKEN_LOCAL_STORAGE_PREFIX = \"walletToken\";\nexport const AUTH_TOKEN_LOCAL_STORAGE_NAME = (clientId: string) => {\n  return `${AUTH_TOKEN_LOCAL_STORAGE_PREFIX}-${clientId}`;\n};\nconst DEVICE_SHARE_LOCAL_STORAGE_PREFIX = \"a\";\nexport const DEVICE_SHARE_LOCAL_STORAGE_NAME = (\n  clientId: string,\n  userId: string,\n) => `${DEVICE_SHARE_LOCAL_STORAGE_PREFIX}-${clientId}-${userId}`;\nexport const DEVICE_SHARE_LOCAL_STORAGE_NAME_DEPRECATED = (clientId: string) =>\n  `${DEVICE_SHARE_LOCAL_STORAGE_PREFIX}-${clientId}`;\n","import type {\n  AuthDetails,\n  InitializedUser,\n  SetUpWalletRpcReturnType,\n} from \"./EmbeddedWallets/EmbeddedWallets\";\n\nexport enum AuthProvider {\n  PAPER_EMAIL_OTP = \"PaperEmailOTP\",\n  GOOGLE = \"Google\",\n  AUTH0 = \"Auth0\",\n  CUSTOM_JWT = \"CustomJWT\",\n}\n\nexport type GetSocialLoginClientIdReturnType = {\n  clientId: string;\n};\n\n// TODO: Clean up tech debt of random type Objects\n// E.g. StoredTokenType is really not used anywhere but it exists as this object for legacy reason\nexport type StoredTokenType = {\n  jwtToken: string;\n  authProvider: AuthProvider;\n  authDetails: AuthDetails;\n  developerClientId: string;\n};\n\nexport type AuthStoredTokenWithCookieReturnType = {\n  storedToken: StoredTokenType & {\n    cookieString: string;\n    shouldStoreCookieString: boolean;\n    isNewUser: boolean;\n  };\n};\nexport type AuthAndWalletRpcReturnType = AuthStoredTokenWithCookieReturnType & {\n  walletDetails: SetUpWalletRpcReturnType;\n};\n\nexport type AuthLoginReturnType = { user: InitializedUser };\n","import type {\n  Chain,\n  CustomizationOptionsType,\n} from \"@paperxyz/sdk-common-utilities\";\nimport type { EmbeddedWallet } from \"../../lib/EmbeddedWallets/EmbeddedWallet\";\nimport type { EmbeddedWalletIframeCommunicator } from \"../../utils/iFrameCommunication/EmbeddedWalletIframeCommunicator\";\n\n// Class constructor types\n// types for class constructors still a little messy right now.\n// Open to PRs from whoever sees this and knows of a cleaner way to handle things\nexport type ClientIdConstructorType = { clientId: string };\nexport type PaperConstructorType = ClientIdConstructorType & {\n  chain: Chain;\n  styles?: CustomizationOptionsType;\n};\nexport type ClientIdWithQuerierType = ClientIdConstructorType & {\n  querier: EmbeddedWalletIframeCommunicator<any>;\n};\nexport type ClientIdWithQuerierAndChainType = ClientIdWithQuerierType & {\n  chain: Chain;\n};\n\n// Auth Types\nexport type AuthDetails = { email: string; userWalletId: string };\n\nexport type InitializedUser = {\n  status: UserStatus.LOGGED_IN_WALLET_INITIALIZED;\n  wallet: EmbeddedWallet;\n  walletAddress: string;\n  authDetails: AuthDetails;\n};\n\n// Embedded Wallet Types\nexport enum UserStatus {\n  LOGGED_OUT = \"Logged Out\",\n  LOGGED_IN_WALLET_INITIALIZED = \"Logged In, Wallet Initialized\",\n}\nexport enum UserWalletStatus {\n  LOGGED_OUT = \"Logged Out\",\n  LOGGED_IN_WALLET_UNINITIALIZED = \"Logged In, Wallet Uninitialized\",\n  LOGGED_IN_NEW_DEVICE = \"Logged In, New Device\",\n  LOGGED_IN_WALLET_INITIALIZED = \"Logged In, Wallet Initialized\",\n}\n\nexport type WalletAddressObjectType = {\n  walletAddress: string;\n};\nexport type SetUpWalletReturnType = WalletAddressObjectType & {\n  initialUserStatus: UserWalletStatus;\n};\nexport type SetUpWalletRpcReturnType = WalletAddressObjectType & {\n  deviceShareStored: string;\n  isIframeStorageEnabled: boolean;\n};\n\nexport type SendEmailOtpReturnType = {\n  isNewUser: boolean;\n  isNewDevice: boolean;\n};\nexport type LogoutReturnType = { success: boolean };\nexport type GetAuthDetailsReturnType = { authDetails?: AuthDetails };\n\n// ! Types seem repetitive, but the name should identify which goes where\n// this is the return type from the EmbeddedWallet Class getUserWalletStatus method iframe call\nexport type GetUserWalletStatusRpcReturnType =\n  | {\n      status: UserWalletStatus.LOGGED_OUT;\n      user: undefined;\n    }\n  | {\n      status: UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED;\n      user: { authDetails: AuthDetails };\n    }\n  | {\n      status: UserWalletStatus.LOGGED_IN_NEW_DEVICE;\n      user: { authDetails: AuthDetails; walletAddress: string };\n    }\n  | {\n      status: UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED;\n      user: Omit<InitializedUser, \"wallet\" | \"status\">;\n    };\n\n// this is the return type from the EmbeddedWallet Class getUserWalletStatus method\nexport type GetUserWalletStatusFnReturnType =\n  | {\n      status: UserWalletStatus.LOGGED_OUT;\n      user: undefined;\n    }\n  | {\n      status: UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED;\n      user: { authDetails: AuthDetails };\n    }\n  | {\n      status: UserWalletStatus.LOGGED_IN_NEW_DEVICE;\n      user: { authDetails: AuthDetails; walletAddress: string };\n    }\n  | {\n      status: UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED;\n      user: Omit<InitializedUser, \"status\">;\n    };\n\n// This is returned from the getUser method in PaperEmbeddedWalletSdk\nexport type GetUser =\n  | {\n      status: UserStatus.LOGGED_OUT;\n    }\n  | InitializedUser;\n","import type { CustomizationOptionsType } from \"@paperxyz/sdk-common-utilities\";\nimport { getPaperOriginUrl } from \"@paperxyz/sdk-common-utilities\";\nimport { EMBEDDED_WALLET_PATH } from \"../../constants/settings\";\nimport { LocalStorage } from \"../Storage/LocalStorage\";\nimport { IframeCommunicator } from \"./IframeCommunicator\";\n\nexport class EmbeddedWalletIframeCommunicator<\n  T extends { [key: string]: any },\n> extends IframeCommunicator<T> {\n  clientId: string;\n  constructor({\n    clientId,\n    customizationOptions,\n  }: {\n    clientId: string;\n    customizationOptions?: CustomizationOptionsType;\n  }) {\n    super({\n      iframeId: EMBEDDED_WALLET_IFRAME_ID,\n      link: createEmbeddedWalletIframeLink({\n        clientId,\n        path: EMBEDDED_WALLET_PATH,\n        queryParams: customizationOptions,\n      }).href,\n      container: document.body,\n    });\n    this.clientId = clientId;\n  }\n\n  override async onIframeLoadedInitVariables() {\n    const localStorage = new LocalStorage({\n      clientId: this.clientId,\n    });\n\n    return {\n      authCookie: await localStorage.getAuthCookie(),\n      deviceShareStored: await localStorage.getDeviceShare(),\n      walletUserId: await localStorage.getWalletUserId(),\n      clientId: this.clientId,\n    };\n  }\n}\n\n// This is the URL and ID tag of the iFrame that we communicate with\nexport function createEmbeddedWalletIframeLink({\n  clientId,\n  path,\n  queryParams,\n}: {\n  clientId: string;\n  path: string;\n  queryParams?: { [key: string]: string | number };\n}) {\n  const embeddedWalletUrl = new URL(path, getPaperOriginUrl());\n  embeddedWalletUrl.searchParams.set(\"clientId\", clientId);\n  if (queryParams) {\n    for (const queryKey of Object.keys(queryParams)) {\n      embeddedWalletUrl.searchParams.set(\n        queryKey,\n        queryParams[queryKey]?.toString() || \"\",\n      );\n    }\n  }\n  return embeddedWalletUrl;\n}\nexport const EMBEDDED_WALLET_IFRAME_ID = \"paper-embedded-wallet-iframe\";\n","import {\n  AUTH_TOKEN_LOCAL_STORAGE_NAME,\n  DEVICE_SHARE_LOCAL_STORAGE_NAME,\n  WALLET_USER_ID_LOCAL_STORAGE_NAME,\n} from \"../../constants/settings\";\n\nconst data = new Map<string, string>();\n\nexport class LocalStorage {\n  protected isSupported: boolean;\n  protected clientId: string;\n  constructor({ clientId }: { clientId: string }) {\n    this.isSupported = typeof window !== \"undefined\" && !!window.localStorage;\n    this.clientId = clientId;\n  }\n\n  protected async getItem(key: string): Promise<string | null> {\n    if (this.isSupported) {\n      return window.localStorage.getItem(key);\n    } else {\n      return data.get(key) ?? null;\n    }\n  }\n\n  protected async setItem(key: string, value: string): Promise<void> {\n    if (this.isSupported) {\n      return window.localStorage.setItem(key, value);\n    } else {\n      data.set(key, value);\n    }\n  }\n\n  protected async removeItem(key: string): Promise<boolean> {\n    const item = await this.getItem(key);\n    if (this.isSupported && item) {\n      window.localStorage.removeItem(key);\n      return true;\n    }\n    return false;\n  }\n\n  async saveAuthCookie(cookie: string): Promise<void> {\n    await this.setItem(AUTH_TOKEN_LOCAL_STORAGE_NAME(this.clientId), cookie);\n  }\n  async getAuthCookie(): Promise<string | null> {\n    return this.getItem(AUTH_TOKEN_LOCAL_STORAGE_NAME(this.clientId));\n  }\n  async removeAuthCookie(): Promise<boolean> {\n    return this.removeItem(AUTH_TOKEN_LOCAL_STORAGE_NAME(this.clientId));\n  }\n\n  async saveDeviceShare(share: string, userId: string): Promise<void> {\n    await this.saveWalletUserId(userId);\n    await this.setItem(\n      DEVICE_SHARE_LOCAL_STORAGE_NAME(this.clientId, userId),\n      share,\n    );\n  }\n  async getDeviceShare(): Promise<string | null> {\n    const userId = await this.getWalletUserId();\n    if (userId) {\n      return this.getItem(\n        DEVICE_SHARE_LOCAL_STORAGE_NAME(this.clientId, userId),\n      );\n    }\n    return null;\n  }\n  async removeDeviceShare(): Promise<boolean> {\n    const userId = await this.getWalletUserId();\n    if (userId) {\n      return this.removeItem(\n        DEVICE_SHARE_LOCAL_STORAGE_NAME(this.clientId, userId),\n      );\n    }\n    return false;\n  }\n\n  async getWalletUserId(): Promise<string | null> {\n    return this.getItem(WALLET_USER_ID_LOCAL_STORAGE_NAME(this.clientId));\n  }\n  async saveWalletUserId(userId: string): Promise<void> {\n    await this.setItem(\n      WALLET_USER_ID_LOCAL_STORAGE_NAME(this.clientId),\n      userId,\n    );\n  }\n  async removeWalletUserId(): Promise<boolean> {\n    return this.removeItem(WALLET_USER_ID_LOCAL_STORAGE_NAME(this.clientId));\n  }\n}\n","import type { MessageType, StyleObject } from \"@paperxyz/sdk-common-utilities\";\nimport { getPaperOriginUrl } from \"@paperxyz/sdk-common-utilities\";\nimport { EMBEDDED_WALLET_PATH } from \"../../constants/settings\";\n\ntype IFrameCommunicatorProps = {\n  link: string;\n  iframeId: string;\n  container?: HTMLElement;\n  iframeStyles?: StyleObject;\n  onIframeInitialize?: () => void;\n};\n\nfunction sleep(seconds: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, seconds * 1000);\n  });\n}\n\nconst iframeBaseStyle = {\n  height: \"100%\",\n  width: \"100%\",\n  border: \"none\",\n  backgroundColor: \"transparent\",\n  position: \"fixed\",\n  top: \"0px\",\n  right: \"0px\",\n  zIndex: \"2147483646\",\n  display: \"none\",\n};\n\n// Global var to help track iframe state\nconst isIframeLoaded = new Map<string, boolean>();\n\nexport class IframeCommunicator<T extends { [key: string]: any }> {\n  private iframe: HTMLIFrameElement;\n  private POLLING_INTERVAL_SECONDS = 1.4;\n  private POST_LOAD_BUFFER_SECONDS = 1;\n\n  constructor({\n    link,\n    iframeId,\n    container = document.body,\n    iframeStyles,\n    onIframeInitialize,\n  }: IFrameCommunicatorProps) {\n    // Creating the IFrame element for communication\n    let iframe = document.getElementById(iframeId) as HTMLIFrameElement | null;\n    const hrefLink = new URL(link);\n    const sdkVersion = process.env.SDK_VERSION;\n    if (!sdkVersion) {\n      throw new Error(\"Missing SDK_VERSION env var\");\n    }\n    hrefLink.searchParams.set(\"sdkVersion\", sdkVersion);\n    if (!iframe || iframe.src != hrefLink.href) {\n      // ! Do not update the hrefLink here or it'll cause multiple re-renders\n      if (!iframe) {\n        iframe = document.createElement(\"iframe\");\n        const mergedIframeStyles = {\n          ...iframeBaseStyle,\n          ...iframeStyles,\n        };\n        Object.assign(iframe.style, mergedIframeStyles);\n        iframe.setAttribute(\"id\", iframeId);\n        container.appendChild(iframe);\n      }\n      iframe.src = hrefLink.href;\n      iframe.setAttribute(\"data-version\", sdkVersion);\n      iframe.onload = this.onIframeLoadHandler(\n        iframe,\n        this.POST_LOAD_BUFFER_SECONDS,\n        onIframeInitialize,\n      );\n    }\n    this.iframe = iframe;\n  }\n\n  protected async onIframeLoadedInitVariables(): Promise<Record<string, any>> {\n    return {};\n  }\n\n  onIframeLoadHandler(\n    iframe: HTMLIFrameElement,\n    prePostMessageSleepInSeconds: number,\n    onIframeInitialize?: () => void,\n  ) {\n    return async () => {\n      const promise = new Promise<boolean>(async (res, rej) => {\n        const channel = new MessageChannel();\n        channel.port1.onmessage = (event: MessageEvent<MessageType<void>>) => {\n          const { data } = event;\n          channel.port1.close();\n          if (!data.success) {\n            return rej(data.error);\n          }\n          isIframeLoaded.set(iframe.src, true);\n          if (onIframeInitialize) {\n            onIframeInitialize();\n          }\n          return res(true);\n        };\n        // iFrame takes a bit of time after loading to be ready for message receiving\n        // This is hacky\n        await sleep(prePostMessageSleepInSeconds);\n        const INIT_IFRAME_EVENT = \"initIframe\";\n        iframe?.contentWindow?.postMessage(\n          // ? We initialise the iframe with a bunch\n          // of useful information so that we don't have to pass it\n          // through in each of the future call. This would be where we do it.\n          {\n            eventType: INIT_IFRAME_EVENT,\n            data: await this.onIframeLoadedInitVariables(),\n          },\n          `${getPaperOriginUrl()}${EMBEDDED_WALLET_PATH}`,\n          [channel.port2],\n        );\n      });\n      await promise;\n    };\n  }\n\n  async call<ReturnData>({\n    procedureName,\n    params,\n    showIframe = false,\n  }: {\n    procedureName: keyof T;\n    params: T[keyof T];\n    showIframe?: boolean;\n  }) {\n    while (!isIframeLoaded.get(this.iframe.src)) {\n      await sleep(this.POLLING_INTERVAL_SECONDS);\n    }\n    if (showIframe) {\n      this.iframe.style.display = \"block\";\n      // magic number to let the display render before performing the animation of the modal in\n      await sleep(0.005);\n    }\n    const promise = new Promise<ReturnData>((res, rej) => {\n      const channel = new MessageChannel();\n      channel.port1.onmessage = async (\n        event: MessageEvent<MessageType<ReturnData>>,\n      ) => {\n        const { data } = event;\n        channel.port1.close();\n        if (showIframe) {\n          // magic number to let modal fade out before hiding it\n          await sleep(0.1);\n          this.iframe.style.display = \"none\";\n        }\n        if (!data.success) {\n          rej(data.error);\n        } else {\n          res(data.data);\n        }\n      };\n      this.iframe.contentWindow?.postMessage(\n        { eventType: procedureName, data: params },\n        `${getPaperOriginUrl()}${EMBEDDED_WALLET_PATH}`,\n        [channel.port2],\n      );\n    });\n    return promise;\n  }\n\n  /**\n   * This has to be called by any iframe that will be removed from the DOM.\n   * Use to make sure that we reset the global loaded state of the particular iframe.src\n   */\n  destroy() {\n    isIframeLoaded.delete(this.iframe.src);\n  }\n}\n","import type {\n  AuthAndWalletRpcReturnType,\n  AuthLoginReturnType,\n  AuthProvider,\n} from \"../interfaces/Auth\";\nimport type {\n  ClientIdWithQuerierType,\n  LogoutReturnType,\n  SendEmailOtpReturnType,\n} from \"../interfaces/EmbeddedWallets/EmbeddedWallets\";\nimport type { EmbeddedWalletIframeCommunicator } from \"../utils/iFrameCommunication/EmbeddedWalletIframeCommunicator\";\nimport { LocalStorage } from \"../utils/Storage/LocalStorage\";\n\nexport type AuthQuerierTypes = {\n  loginWithJwtAuthCallback: {\n    token: string;\n    authProvider: AuthProvider;\n    recoveryCode?: string;\n  };\n  loginWithPaperModal: void | { email: string };\n  logout: void;\n  sendPaperEmailLoginOtp: { email: string };\n  verifyPaperEmailLoginOtp: {\n    email: string;\n    otp: string;\n    recoveryCode?: string;\n  };\n};\n\nexport class Auth {\n  protected clientId: string;\n  protected AuthQuerier: EmbeddedWalletIframeCommunicator<AuthQuerierTypes>;\n  protected localStorage: LocalStorage;\n  protected onAuthSuccess: (\n    authResults: AuthAndWalletRpcReturnType,\n  ) => Promise<AuthLoginReturnType>;\n\n  /**\n   * Used to manage the user's auth states. This should not be instantiated directly.\n   * Call {@link PaperEmbeddedWalletSdk.auth} instead.\n   *\n   * Authentication settings can be managed via the [authentication settings dashboard](https://withpaper.com/dashboard/auth-settings)\n   * @param {string} params.clientId the clientId associated with the various authentication settings\n   */\n  constructor({\n    clientId,\n    querier,\n    onAuthSuccess,\n  }: ClientIdWithQuerierType & {\n    onAuthSuccess: (\n      authDetails: AuthAndWalletRpcReturnType,\n    ) => Promise<AuthLoginReturnType>;\n  }) {\n    this.clientId = clientId;\n    this.AuthQuerier = querier;\n    this.localStorage = new LocalStorage({ clientId });\n    this.onAuthSuccess = onAuthSuccess;\n  }\n\n  private async postLogin({\n    storedToken,\n    walletDetails,\n  }: AuthAndWalletRpcReturnType): Promise<AuthLoginReturnType> {\n    if (storedToken.shouldStoreCookieString) {\n      await this.localStorage.saveAuthCookie(storedToken.cookieString);\n    }\n    const initializedUser = await this.onAuthSuccess({\n      storedToken,\n      walletDetails,\n    });\n    return initializedUser;\n  }\n\n  /**\n   * @description\n   * Used to log the user in with an oauth login flow\n   *\n   * Note that you have to either enable \"Auth0\" or \"Custom JSON Web Token\" in the [auth setting dashboard](https://withpaper.com/dashboard/auth-settings) in order to use this\n   * @param {string} jwtParams.token The associate token from the oauth callback\n   * @param {AuthProvider} jwtParams.provider The Auth provider that is being used\n   * @param {string} jwtParams.recoveryCode This has to be passed in if the user is not logging in for the first time in order for us to decrypt and recover the users wallet\n   * @returns {{user: InitializedUser}} An InitializedUser object containing the user's status, wallet, authDetails, and more\n   */\n  async loginWithJwtAuth({\n    token,\n    authProvider,\n    recoveryCode,\n  }: AuthQuerierTypes[\"loginWithJwtAuthCallback\"]): Promise<AuthLoginReturnType> {\n    const result = await this.AuthQuerier.call<AuthAndWalletRpcReturnType>({\n      procedureName: \"loginWithJwtAuthCallback\",\n      params: {\n        token,\n        authProvider,\n        recoveryCode,\n      },\n    });\n    return this.postLogin(result);\n  }\n\n  /**\n   * @description\n   * Used to log the user into their Paper wallet on your platform via a myriad of auth providers\n   *\n   * @example\n   * const Paper = new PaperEmbeddedWalletSdk({clientId: \"YOUR_CLIENT_ID\", chain: \"Polygon\"})\n   * try {\n   *   const user = await Paper.auth.loginWithPaperModal();\n   *   // user is now logged in\n   * } catch (e) {\n   *   // User closed modal or something else went wrong during the authentication process\n   *   console.error(e)\n   * }\n   *\n   * @returns {{user: InitializedUser}} An InitializedUser object. See {@link PaperEmbeddedWalletSdk.getUser} for more\n   */\n  async loginWithPaperModal(): Promise<AuthLoginReturnType> {\n    const result = await this.AuthQuerier.call<AuthAndWalletRpcReturnType>({\n      procedureName: \"loginWithPaperModal\",\n      params: undefined,\n      showIframe: true,\n    });\n    return this.postLogin(result);\n  }\n\n  /**\n   * @description\n   * Used to log the user into their Paper wallet using email OTP\n   *\n   * @example\n   *  const Paper = new PaperEmbeddedWalletSdk({clientId: \"\", chain: \"Polygon\"});\n   *  try {\n   *    // prompts user to enter the code they received\n   *    const user = await Paper.auth.loginWithPaperEmailOtp({ email : \"you@example.com\" });\n   *    // user is now logged in\n   *  } catch (e) {\n   *    // User closed the OTP modal or something else went wrong during the authentication process\n   *    console.error(e)\n   *  }\n   * @param {string} props.email We will send the email an OTP that needs to be entered in order for them to be logged in.\n   * @returns {{user: InitializedUser}} An InitializedUser object. See {@link PaperEmbeddedWalletSdk.getUser} for more\n   */\n  async loginWithPaperEmailOtp({\n    email,\n  }: {\n    email: string;\n  }): Promise<AuthLoginReturnType> {\n    const result = await this.AuthQuerier.call<AuthAndWalletRpcReturnType>({\n      procedureName: \"loginWithPaperModal\",\n      params: { email },\n      showIframe: true,\n    });\n    return this.postLogin(result);\n  }\n\n  /**\n   * @description\n   * A headless way to send the users at {email} an OTP code.\n   * You need to then call {@link Auth.verifyPaperEmailLoginOtp} in order to complete the login process\n   *\n   * @example\n   *  const Paper = new PaperEmbeddedWalletSdk({clientId: \"\", chain: \"Polygon\"});\n   *  // sends user an OTP code\n   * try {\n   *    const { isNewUser } = await Paper.auth.sendPaperEmailLoginOtp({ email : \"you@example.com\" });\n   * } catch(e) {\n   *    // Error Sending user's email an OTP code\n   *    console.error(e);\n   * }\n   *\n   * // Then when your user is ready to verify their OTP\n   * try {\n   *    const user = await Paper.auth.verifyPaperEmailLoginOtp({ email: \"you@example.com\", otp: \"6-DIGIT_CODE_HERE\", recoveryCode: \"Required if user is an existing user. i.e. !isNewUser\"});\n   * } catch(e) {\n   *    // Error verifying the OTP code\n   *    console.error(e)\n   * }\n   *\n   * @param {string} props.email We will send the email an OTP that needs to be entered in order for them to be logged in.\n   * @returns {{ success: boolean, isNewUser: boolean }} Success: indicating if the email was successfully sent (Note the email could still end up in the user's spam folder). IsNewUser indicates if the user is a new user to your platform\n   */\n  async sendPaperEmailLoginOtp({\n    email,\n  }: AuthQuerierTypes[\"sendPaperEmailLoginOtp\"]): Promise<SendEmailOtpReturnType> {\n    const { isNewUser, isNewDevice } =\n      await this.AuthQuerier.call<SendEmailOtpReturnType>({\n        procedureName: \"sendPaperEmailLoginOtp\",\n        params: { email },\n      });\n    return { isNewUser, isNewDevice };\n  }\n\n  /**\n   *  @description\n   * Used to verify the otp that the user receives from  Paper\n   *\n   * See {@link Auth.sendPaperEmailLoginOtp} for how the headless call flow looks like\n   *\n   * @param {string} props.email We will send the email an OTP that needs to be entered in order for them to be logged in.\n   * @param {string} props.otp The code that the user received in their email\n   * @param {string} props.recoveryCode The code that is first sent to the user when they sign up. Required if user is an existing user. i.e. !isNewUser from return params of {@link Auth.sendPaperEmailLoginOtp}\n   * @returns {{user: InitializedUser}} An InitializedUser object containing the user's status, wallet, authDetails, and more\n   */\n  async verifyPaperEmailLoginOtp({\n    email,\n    otp,\n    recoveryCode,\n  }: AuthQuerierTypes[\"verifyPaperEmailLoginOtp\"]) {\n    const result = await this.AuthQuerier.call<AuthAndWalletRpcReturnType>({\n      procedureName: \"verifyPaperEmailLoginOtp\",\n      params: { email, otp, recoveryCode },\n    });\n    return this.postLogin(result);\n  }\n\n  /**\n   * @description\n   * Logs any existing user out of their wallet.\n   * @returns {{success: boolean}} true if a user is successfully logged out. false if there's no user currently logged in.\n   */\n  async logout(): Promise<LogoutReturnType> {\n    const { success } = await this.AuthQuerier.call<LogoutReturnType>({\n      procedureName: \"logout\",\n      params: undefined,\n    });\n    const isRemoveAuthCookie = await this.localStorage.removeAuthCookie();\n    const isRemoveUserId = await this.localStorage.removeWalletUserId();\n\n    return {\n      success: success || isRemoveAuthCookie || isRemoveUserId,\n    };\n  }\n}\n","import type { Networkish } from \"@ethersproject/providers\";\nimport { getDefaultProvider } from \"@ethersproject/providers\";\nimport type { Chain } from \"@paperxyz/sdk-common-utilities\";\nimport { ChainToPublicRpc } from \"@paperxyz/sdk-common-utilities\";\nimport type {\n  ClientIdWithQuerierAndChainType,\n  GetUserWalletStatusFnReturnType,\n  GetUserWalletStatusRpcReturnType,\n  SetUpWalletRpcReturnType,\n  WalletAddressObjectType,\n} from \"../../interfaces/EmbeddedWallets/EmbeddedWallets\";\nimport { UserWalletStatus } from \"../../interfaces/EmbeddedWallets/EmbeddedWallets\";\n\nimport type { EmbeddedWalletIframeCommunicator } from \"../../utils/iFrameCommunication/EmbeddedWalletIframeCommunicator\";\nimport { LocalStorage } from \"../../utils/Storage/LocalStorage\";\nimport { GaslessTransactionMaker } from \"./GaslessTransactionMaker\";\nimport { EthersSigner } from \"./Signer\";\n\nexport type WalletManagementTypes = {\n  createWallet: void;\n  setUpNewDevice: void;\n  getUserStatus: void;\n};\nexport type WalletManagementUiTypes = {\n  createWalletUi: void;\n  setUpNewDeviceUi: void;\n};\n\nexport type EmbeddedWalletInternalHelperType = { showUi: boolean };\n\nexport class EmbeddedWallet {\n  protected clientId: string;\n  protected chain: Chain;\n  protected walletManagerQuerier: EmbeddedWalletIframeCommunicator<\n    WalletManagementTypes & WalletManagementUiTypes\n  >;\n  protected localStorage: LocalStorage;\n\n  public gasless: GaslessTransactionMaker;\n\n  /**\n   * Not meant to be initialized directly. Call {@link .initializeUser} to get an instance\n   * @param param0\n   */\n  constructor({ clientId, chain, querier }: ClientIdWithQuerierAndChainType) {\n    this.clientId = clientId;\n    this.chain = chain;\n    this.walletManagerQuerier = querier;\n\n    this.gasless = new GaslessTransactionMaker({\n      chain,\n      clientId,\n      querier,\n    });\n\n    this.localStorage = new LocalStorage({ clientId });\n  }\n\n  /**\n   * @internal\n   * Used to set-up the user device in the case that they are using incognito\n   * @param {string} param.deviceShareStored the value that is saved for the user's device share.\n   * We save this into the localStorage on the site itself if we could not save it within the iframe's localStorage.\n   * This happens in incognito mostly\n   * @param {string} param.walletAddress User's wallet address\n   * @param {boolean} param.isIframeStorageEnabled Tells us if we were able to store values in the localStorage in our iframe.\n   * We need to store it under the dev's domain localStorage if we weren't able to store things in the iframe\n   * @returns {{ walletAddress : string }} The user's wallet details\n   */\n  async postWalletSetUp({\n    deviceShareStored,\n    walletAddress,\n    isIframeStorageEnabled,\n    walletUserId,\n  }: SetUpWalletRpcReturnType & {\n    walletUserId: string;\n  }): Promise<WalletAddressObjectType> {\n    if (!isIframeStorageEnabled) {\n      await this.localStorage.saveDeviceShare(deviceShareStored, walletUserId);\n    }\n    return { walletAddress };\n  }\n\n  /**\n   * @internal\n   * Gets the various status states of the user\n   * @example\n   *  const userStatus = await Paper.getUserWalletStatus();\n   *  switch (userStatus.status) {\n   *  case UserWalletStatus.LOGGED_OUT: {\n   *    // User is logged out, call one of the auth methods on Paper.auth to authenticate the user\n   *    break;\n   *  }\n   *  case UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED: {\n   *    // User is logged in, but does not have a wallet associated with it\n   *    // you also have access to the user's details\n   *    userStatus.user.authDetails;\n   *    break;\n   *  }\n   *  case UserWalletStatus.LOGGED_IN_NEW_DEVICE: {\n   *    // User is logged in and created a wallet already, but is missing the device shard\n   *    // You have access to:\n   *    userStatus.user.authDetails;\n   *    userStatus.user.walletAddress;\n   *    break;\n   *  }\n   *  case UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED: {\n   *    // user is logged in and wallet is all set up.\n   *    // You have access to:\n   *    userStatus.user.authDetails;\n   *    userStatus.user.walletAddress;\n   *    userStatus.user.wallet;\n   *    break;\n   *  }\n   *}\n   * @returns {GetUserWalletStatusFnReturnType} an object to containing various information on the user statuses\n   */\n  async getUserWalletStatus(): Promise<GetUserWalletStatusFnReturnType> {\n    const userStatus =\n      await this.walletManagerQuerier.call<GetUserWalletStatusRpcReturnType>({\n        procedureName: \"getUserStatus\",\n        params: undefined,\n      });\n    if (userStatus.status === UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED) {\n      return {\n        status: UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED,\n        user: { ...userStatus.user, wallet: this },\n      };\n    }\n    return userStatus;\n  }\n\n  /**\n   * @description\n   * Switches the chain that the user wallet is currently on.\n   * @example\n   * // user wallet will be set to Polygon\n   * const Paper = new PaperEmbeddedWalletSdk({clientId: \"\", chain: \"Polygon\"});\n   * const user = await Paper.initializeUser();\n   * // Switch the user wallet to Mumbai\n   * await user.wallet.setChain({ chain: \"Mumbai\" });\n   * @param {Chain} params.chain The chain that we are changing the user wallet too\n   */\n  async setChain({ chain }: { chain: Chain }): Promise<void> {\n    this.chain = chain;\n    this.gasless = new GaslessTransactionMaker({\n      chain,\n      clientId: this.clientId,\n      querier: this.walletManagerQuerier,\n    });\n  }\n\n  /**\n   * Returns an Ethers.Js compatible signer that you can use in conjunction with the rest of dApp\n   * @example\n   * const Paper = new PaperEmbeddedWalletSdk({clientId: \"\", chain: \"Polygon\"});\n   * const user = await Paper.getUser();\n   * if (user.status === UserStatus.LOGGED_IN_WALLET_INITIALIZED) {\n   *    // returns a signer on the Polygon mainnet\n   *    const signer = await user.getEthersJsSigner();\n   *    // returns a signer on the specified RPC endpoints\n   *    const signer = await user.getEthersJsSigner({rpcEndpoint: \"https://eth-rpc.gateway.pokt.network\"});\n   * }\n   * @param {Networkish} network.rpcEndpoint the rpc url where calls will be routed through\n   * @throws If attempting to call the function without the user wallet initialize on their current device. This should never happen if call {@link PaperEmbeddedWalletSdk.initializeUser} before accessing this function\n   * @returns A signer that is compatible with Ether.js. Defaults to the public rpc on the chain specified when initializing the {@link PaperEmbeddedWalletSdk} instance\n   */\n  async getEthersJsSigner(network?: {\n    rpcEndpoint: Networkish;\n  }): Promise<EthersSigner> {\n    const signer = new EthersSigner({\n      clientId: this.clientId,\n      provider: getDefaultProvider(\n        network?.rpcEndpoint ?? ChainToPublicRpc[this.chain],\n      ),\n      querier: this.walletManagerQuerier,\n    });\n    return signer;\n  }\n}\n","import type { Chain } from \"@paperxyz/sdk-common-utilities\";\nimport type { ClientIdWithQuerierAndChainType } from \"../../interfaces/EmbeddedWallets/EmbeddedWallets\";\nimport type {\n  CallContractReturnType,\n  ContractCallInputType,\n} from \"../../interfaces/EmbeddedWallets/GaslessTransactionMaker\";\nimport type { EmbeddedWalletIframeCommunicator } from \"../../utils/iFrameCommunication/EmbeddedWalletIframeCommunicator\";\n\nexport type GaslessTransactionQuerierTypes = {\n  callContract: {\n    contractAddress: string;\n    method: {\n      stub: string;\n      args: Array<unknown>;\n    };\n    chain: Chain;\n  };\n};\n\n/**\n * @description GaslessTransactionMaker is used to execute gasless transactions from the embedded wallets\n */\nexport class GaslessTransactionMaker {\n  protected chain: Chain;\n  protected clientId: string;\n  protected gaslessTransactionQuerier: EmbeddedWalletIframeCommunicator<GaslessTransactionQuerierTypes>;\n  constructor({ chain, clientId, querier }: ClientIdWithQuerierAndChainType) {\n    this.chain = chain;\n    this.clientId = clientId;\n    this.gaslessTransactionQuerier = querier;\n  }\n  /**\n   * @description\n   * Use to call arbitrary contracts on the blockchain. Note that you have to enable {@link https://withpaper.com/dashboard/developers Sponsored Fees} in order for this to work.\n   *\n   * @param {string} params.contractAddress The address for which the contract call is directed too.\n   * @param {string} params.methodInterface the function stub on the contract. This looks something like `function myFunctionName(address user, uint256 tokenId) external payable`. Refer to this {@link https://blog.ricmoo.com/human-readable-contract-abis-in-ethers-js-141902f4d917 ethers.js article} for more.\n   * @param {Array} params.methodArgs The arguments that is to be passed to the contract in order that they are to be passed to the contract.\n   * @throws if there is an error calling the contract for whatever reason.\n   * @returns {{ transactionHash: string }} The transaction hash associated with the successful contract call.\n   */\n  async callContract({\n    contractAddress,\n    methodArgs,\n    methodInterface,\n  }: ContractCallInputType): Promise<CallContractReturnType> {\n    return await this.gaslessTransactionQuerier.call<CallContractReturnType>({\n      procedureName: \"callContract\",\n      params: {\n        chain: this.chain,\n        contractAddress,\n        method: {\n          args: methodArgs,\n          stub: methodInterface,\n        },\n      },\n    });\n  }\n}\n","import type {\n  Provider,\n  TransactionRequest,\n} from \"@ethersproject/abstract-provider\";\nimport type {\n  TypedDataDomain,\n  TypedDataField,\n} from \"@ethersproject/abstract-signer\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport type { Bytes } from \"@ethersproject/bytes\";\nimport type { Deferrable } from \"@ethersproject/properties\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport type { ClientIdWithQuerierType } from \"../../interfaces/EmbeddedWallets/EmbeddedWallets\";\nimport type {\n  GetAddressReturnType,\n  SignedTypedDataReturnType,\n  SignMessageReturnType,\n  SignTransactionReturnType,\n} from \"../../interfaces/EmbeddedWallets/Signer\";\n\nimport type { EmbeddedWalletIframeCommunicator } from \"../../utils/iFrameCommunication/EmbeddedWalletIframeCommunicator\";\n\nexport type SignerProcedureTypes = {\n  getAddress: void;\n  signMessage: { message: string | Bytes; chainId: number | undefined };\n  signTransaction: {\n    transaction: Deferrable<TransactionRequest>;\n    chainId: number | undefined;\n  };\n  signTypedDataV4: {\n    domain: TypedDataDomain;\n    types: Record<string, Array<TypedDataField>>;\n    message: Record<string, unknown>;\n    chainId: number | undefined;\n  };\n  connect: { provider: Provider };\n};\n\nexport class EthersSigner extends Signer {\n  protected querier: EmbeddedWalletIframeCommunicator<SignerProcedureTypes>;\n  protected clientId: string;\n  private DEFAULT_ETHEREUM_CHAIN_ID = 1;\n  constructor({\n    provider,\n    clientId,\n    querier,\n  }: ClientIdWithQuerierType & {\n    provider: Provider;\n  }) {\n    super();\n    this.clientId = clientId;\n    this.querier = querier;\n    defineReadOnly(this, \"provider\", provider);\n  }\n\n  override async getAddress(): Promise<string> {\n    const { address } = await this.querier.call<GetAddressReturnType>({\n      procedureName: \"getAddress\",\n      params: undefined,\n    });\n    return address;\n  }\n\n  override async signMessage(message: string | Bytes): Promise<string> {\n    const { signedMessage } = await this.querier.call<SignMessageReturnType>({\n      procedureName: \"signMessage\",\n      params: {\n        message,\n        chainId:\n          (await this.provider?.getNetwork())?.chainId ??\n          this.DEFAULT_ETHEREUM_CHAIN_ID,\n      },\n    });\n    return signedMessage;\n  }\n\n  override async signTransaction(\n    transaction: TransactionRequest,\n  ): Promise<string> {\n    const { signedTransaction } =\n      await this.querier.call<SignTransactionReturnType>({\n        procedureName: \"signTransaction\",\n        params: {\n          transaction,\n          chainId:\n            (await this.provider?.getNetwork())?.chainId ??\n            this.DEFAULT_ETHEREUM_CHAIN_ID,\n        },\n      });\n    return signedTransaction;\n  }\n\n  async _signTypedData(\n    domain: SignerProcedureTypes[\"signTypedDataV4\"][\"domain\"],\n    types: SignerProcedureTypes[\"signTypedDataV4\"][\"types\"],\n    message: SignerProcedureTypes[\"signTypedDataV4\"][\"message\"],\n  ): Promise<string> {\n    const { signedTypedData } =\n      await this.querier.call<SignedTypedDataReturnType>({\n        procedureName: \"signTypedDataV4\",\n        params: {\n          domain,\n          types,\n          message,\n          chainId:\n            (await this.provider?.getNetwork())?.chainId ??\n            this.DEFAULT_ETHEREUM_CHAIN_ID,\n        },\n      });\n    return signedTypedData;\n  }\n\n  override connect(provider: Provider): EthersSigner {\n    return new EthersSigner({\n      clientId: this.clientId,\n      provider,\n      querier: this.querier,\n    });\n  }\n}\n","import type {\n  GetUser,\n  PaperConstructorType,\n} from \"../interfaces/EmbeddedWallets/EmbeddedWallets\";\nimport {\n  UserStatus,\n  UserWalletStatus,\n} from \"../interfaces/EmbeddedWallets/EmbeddedWallets\";\nimport { EmbeddedWalletIframeCommunicator } from \"../utils/iFrameCommunication/EmbeddedWalletIframeCommunicator\";\nimport type { AuthQuerierTypes } from \"./Auth\";\nimport { Auth } from \"./Auth\";\nimport { EmbeddedWallet } from \"./EmbeddedWallets/EmbeddedWallet\";\n\nexport class PaperEmbeddedWalletSdk {\n  protected clientId: string;\n  protected querier: EmbeddedWalletIframeCommunicator<AuthQuerierTypes>;\n\n  private wallet: EmbeddedWallet;\n  /**\n   * Used to manage the Auth state of the user.\n   */\n  auth: Auth;\n\n  /**\n   * @example\n   * const Paper = new PaperEmbeddedWalletSdk({ clientId: \"\", chain: \"Goerli\" });\n   * @param {string} initParams.clientId the clientId found on the {@link https://withpaper.com/dashboard/developers developer's dashboard}\n   * @param {Chain} initParams.chain sets the default chain that the EmbeddedWallet will live on.\n   * @param {CustomizationOptionsType} initParams.styles sets the default style override for any modal that pops up asking for user's details when creating wallet or logging in.\n   */\n  constructor({ clientId, chain, styles }: PaperConstructorType) {\n    this.clientId = clientId;\n    this.querier = new EmbeddedWalletIframeCommunicator({\n      clientId,\n      customizationOptions: styles,\n    });\n    this.wallet = new EmbeddedWallet({\n      clientId,\n      chain,\n      querier: this.querier,\n    });\n\n    this.auth = new Auth({\n      clientId,\n      querier: this.querier,\n      onAuthSuccess: async (authResult) => {\n        await this.wallet.postWalletSetUp({\n          ...authResult.walletDetails,\n          walletUserId: authResult.storedToken.authDetails.userWalletId,\n        });\n        return {\n          user: {\n            status: UserStatus.LOGGED_IN_WALLET_INITIALIZED,\n            authDetails: authResult.storedToken.authDetails,\n            wallet: this.wallet,\n            walletAddress: authResult.walletDetails.walletAddress,\n          },\n        };\n      },\n    });\n  }\n\n  /**\n   * Gets the usr if they are logged in\n   * @example\n   *  const user = await Paper.getUser();\n   *  switch (user.status) {\n   *     case UserStatus.LOGGED_OUT: {\n   *       // User is logged out, call one of the auth methods on Paper.auth to authenticate the user\n   *       break;\n   *     }\n   *     case UserStatus.LOGGED_IN_WALLET_INITIALIZED: {\n   *       // user is logged in and wallet is all set up.\n   *       // You have access to:\n   *       user.status;\n   *       user.authDetails;\n   *       user.walletAddress;\n   *       user.wallet;\n   *       break;\n   *     }\n   *}\n   * @returns {GetUser} an object to containing various information on the user statuses\n   */\n  async getUser(): Promise<GetUser> {\n    const userStatus = await this.wallet.getUserWalletStatus();\n    switch (userStatus.status) {\n      // user gets {UserWalletStatus.LOGGED_IN_NEW_DEVICE} when they log in but never complete the recovery flow and exits (close modal, refresh etc)\n      case UserWalletStatus.LOGGED_IN_NEW_DEVICE:\n      // User gets {UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED} when they log in but manage to exit the client in the small window between auth completion and sending them their wallet recovery details\n      case UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED:\n        // in both case, we simply log them out to reset their state\n        await this.auth.logout();\n        return this.getUser();\n      case UserWalletStatus.LOGGED_OUT:\n        return {\n          status: UserStatus.LOGGED_OUT,\n        };\n      case UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED:\n        return {\n          status: UserStatus.LOGGED_IN_WALLET_INITIALIZED,\n          ...userStatus.user,\n        };\n    }\n  }\n}\n"],"mappings":"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","names":["EMBEDDED_WALLET_PATH","WALLET_USER_ID_LOCAL_STORAGE_NAME","clientId","AUTH_TOKEN_LOCAL_STORAGE_PREFIX","AUTH_TOKEN_LOCAL_STORAGE_NAME","DEVICE_SHARE_LOCAL_STORAGE_PREFIX","DEVICE_SHARE_LOCAL_STORAGE_NAME","userId","DEVICE_SHARE_LOCAL_STORAGE_NAME_DEPRECATED","AuthProvider","UserStatus","UserWalletStatus","getPaperOriginUrl","data","LocalStorage","clientId","key","__async","_a","value","item","cookie","AUTH_TOKEN_LOCAL_STORAGE_NAME","share","userId","DEVICE_SHARE_LOCAL_STORAGE_NAME","WALLET_USER_ID_LOCAL_STORAGE_NAME","getPaperOriginUrl","sleep","seconds","resolve","iframeBaseStyle","isIframeLoaded","IframeCommunicator","link","iframeId","container","iframeStyles","onIframeInitialize","iframe","hrefLink","sdkVersion","mergedIframeStyles","__spreadValues","__async","prePostMessageSleepInSeconds","res","rej","_a","channel","event","data","INIT_IFRAME_EVENT","getPaperOriginUrl","EMBEDDED_WALLET_PATH","_0","procedureName","params","showIframe","EmbeddedWalletIframeCommunicator","IframeCommunicator","clientId","customizationOptions","EMBEDDED_WALLET_IFRAME_ID","createEmbeddedWalletIframeLink","EMBEDDED_WALLET_PATH","__async","localStorage","LocalStorage","path","queryParams","_a","embeddedWalletUrl","getPaperOriginUrl","queryKey","Auth","clientId","querier","onAuthSuccess","LocalStorage","_0","__async","storedToken","walletDetails","token","authProvider","recoveryCode","result","email","isNewUser","isNewDevice","otp","success","isRemoveAuthCookie","isRemoveUserId","getDefaultProvider","ChainToPublicRpc","GaslessTransactionMaker","chain","clientId","querier","_0","__async","contractAddress","methodArgs","methodInterface","Signer","defineReadOnly","EthersSigner","Signer","provider","clientId","querier","defineReadOnly","__async","address","message","_a","_b","_c","signedMessage","transaction","signedTransaction","domain","types","signedTypedData","EmbeddedWallet","clientId","chain","querier","GaslessTransactionMaker","LocalStorage","_0","__async","deviceShareStored","walletAddress","isIframeStorageEnabled","walletUserId","userStatus","__spreadProps","__spreadValues","network","_a","EthersSigner","getDefaultProvider","ChainToPublicRpc","PaperEmbeddedWalletSdk","clientId","chain","styles","EmbeddedWalletIframeCommunicator","EmbeddedWallet","Auth","authResult","__async","__spreadProps","__spreadValues","userStatus"]}